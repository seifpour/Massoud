clc;
clear all
close all;
%% defintion problem
S=50;
I=S*2;
K=29;
C=1;
P=24*60;
U=4;
Pu(1,1:U)=[0.25 0.25 0.25 0.25];
Tt(1,1:U)=[20 20 20 20];
MinTs=1;
%% Data Set
TRmin(1:S,1:U)=[5.194805195	5.194805195	5.194805195	5.194805195
    5.194805195	5.194805195	5.194805195	5.194805195
    8.311688312	8.311688312	8.311688312	8.311688312
    9.350649351	9.350649351	9.350649351	9.350649351
    4.675324675	4.675324675	4.675324675	4.675324675
    6.233766234	6.233766234	6.233766234	6.233766234
    11.94805195	11.94805195	11.94805195	11.94805195
    13.50649351	13.50649351	13.50649351	13.50649351
    8.831168831	8.831168831	8.831168831	8.831168831
    11.42857143	11.42857143	11.42857143	11.42857143
    7.272727273	7.272727273	7.272727273	7.272727273
    10.90909091	10.90909091	10.90909091	10.90909091
    10.90909091	10.90909091	10.90909091	10.90909091
    9.350649351	9.350649351	9.350649351	9.350649351
    9.87012987	9.87012987	9.87012987	9.87012987
    7.272727273	7.272727273	7.272727273	7.272727273
    7.272727273	7.272727273	7.272727273	7.272727273
    11.42857143	11.42857143	11.42857143	11.42857143
    6.233766234	6.233766234	6.233766234	6.233766234
    11.94805195	11.94805195	11.94805195	11.94805195
    8.311688312	8.311688312	8.311688312	8.311688312
    7.272727273	7.272727273	7.272727273	7.272727273
    11.94805195	11.94805195	11.94805195	11.94805195
    12.46753247	12.46753247	12.46753247	12.46753247
    9.87012987	9.87012987	9.87012987	9.87012987
    10.38961039	10.38961039	10.38961039	10.38961039
    10.38961039	10.38961039	10.38961039	10.38961039
    9.87012987	9.87012987	9.87012987	9.87012987
    10.38961039	10.38961039	10.38961039	10.38961039
    11.94805195	11.94805195	11.94805195	11.94805195
    9.87012987	9.87012987	9.87012987	9.87012987
    11.42857143	11.42857143	11.42857143	11.42857143
    10.38961039	10.38961039	10.38961039	10.38961039
    10.38961039	10.38961039	10.38961039	10.38961039
    9.87012987	9.87012987	9.87012987	9.87012987
    12.46753247	12.46753247	12.46753247	12.46753247
    10.38961039	10.38961039	10.38961039	10.38961039
    10.90909091	10.90909091	10.90909091	10.90909091
    11.42857143	11.42857143	11.42857143	11.42857143
    12.46753247	12.46753247	12.46753247	12.46753247
    11.94805195	11.94805195	11.94805195	11.94805195
    4.675324675	4.675324675	4.675324675	4.675324675
    7.272727273	7.272727273	7.272727273	7.272727273
    11.42857143	11.42857143	11.42857143	11.42857143
    11.94805195	11.94805195	11.94805195	11.94805195
    8.831168831	8.831168831	8.831168831	8.831168831
    9.87012987	9.87012987	9.87012987	9.87012987
    9.350649351	9.350649351	9.350649351	9.350649351
    9.87012987	9.87012987	9.87012987	9.87012987
    10.38961039	10.38961039	10.38961039	10.38961039];
TRmax(1:S,1:U)=[7.792207792	7.792207792	7.792207792	7.792207792
    7.792207792	7.792207792	7.792207792	7.792207792
    12.46753247	12.46753247	12.46753247	12.46753247
    14.02597403	14.02597403	14.02597403	14.02597403
    7.012987013	7.012987013	7.012987013	7.012987013
    9.350649351	9.350649351	9.350649351	9.350649351
    17.92207792	17.92207792	17.92207792	17.92207792
    20.25974026	20.25974026	20.25974026	20.25974026
    13.24675325	13.24675325	13.24675325	13.24675325
    17.14285714	17.14285714	17.14285714	17.14285714
    10.90909091	10.90909091	10.90909091	10.90909091
    16.36363636	16.36363636	16.36363636	16.36363636
    16.36363636	16.36363636	16.36363636	16.36363636
    14.02597403	14.02597403	14.02597403	14.02597403
    14.80519481	14.80519481	14.80519481	14.80519481
    10.90909091	10.90909091	10.90909091	10.90909091
    10.90909091	10.90909091	10.90909091	10.90909091
    17.14285714	17.14285714	17.14285714	17.14285714
    9.350649351	9.350649351	9.350649351	9.350649351
    17.92207792	17.92207792	17.92207792	17.92207792
    12.46753247	12.46753247	12.46753247	12.46753247
    10.90909091	10.90909091	10.90909091	10.90909091
    17.92207792	17.92207792	17.92207792	17.92207792
    18.7012987	18.7012987	18.7012987	18.7012987
    14.80519481	14.80519481	14.80519481	14.80519481
    15.58441558	15.58441558	15.58441558	15.58441558
    15.58441558	15.58441558	15.58441558	15.58441558
    14.80519481	14.80519481	14.80519481	14.80519481
    15.58441558	15.58441558	15.58441558	15.58441558
    17.92207792	17.92207792	17.92207792	17.92207792
    14.80519481	14.80519481	14.80519481	14.80519481
    17.14285714	17.14285714	17.14285714	17.14285714
    15.58441558	15.58441558	15.58441558	15.58441558
    15.58441558	15.58441558	15.58441558	15.58441558
    14.80519481	14.80519481	14.80519481	14.80519481
    18.7012987	18.7012987	18.7012987	18.7012987
    15.58441558	15.58441558	15.58441558	15.58441558
    16.36363636	16.36363636	16.36363636	16.36363636
    17.14285714	17.14285714	17.14285714	17.14285714
    18.7012987	18.7012987	18.7012987	18.7012987
    17.92207792	17.92207792	17.92207792	17.92207792
    7.012987013	7.012987013	7.012987013	7.012987013
    10.90909091	10.90909091	10.90909091	10.90909091
    17.14285714	17.14285714	17.14285714	17.14285714
    17.92207792	17.92207792	17.92207792	17.92207792
    13.24675325	13.24675325	13.24675325	13.24675325
    14.80519481	14.80519481	14.80519481	14.80519481
    14.02597403	14.02597403	14.02597403	14.02597403
    14.80519481	14.80519481	14.80519481	14.80519481
    15.58441558	15.58441558	15.58441558	15.58441558];
Hmin(1,1:U)=[9 9 9 9];
Hmax(1,1:U)=[26 26 26 26];
Aiu(1:S,1:U)=[360	270	180	45
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    44	33	22	6
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    36	27	18	5
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    54	41	27	7
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    6	5	3	1
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0
    0	0	0	0];
TPAiu(1:S,1:U)=[30.00	50.00	68.00	135.00
    43.00	60.00	78.00	148.00
    53.00	70.00	88.00	159.00
    67.00	80.00	98.00	173.00
    72.00	85.00	103.00	180.00
    79.00	92.00	110.00	189.00
    95.00	120.00	128.00	202.00
    160.00	147.00	171.00	218.00
    172.00	159.00	182.00	229.00
    186.00	169.00	192.00	240.00
    193.00	177.00	201.00	248.00
    210.00	192.00	221.00	263.00
    221.00	202.00	233.00	273.00
    242.00	224.00	255.00	297.00
    260.00	239.00	272.00	312.00
    273.00	253.00	287.00	328.00
    287.00	263.00	322.00	358.00
    303.00	281.00	342.00	377.00
    311.00	288.00	349.00	383.00
    325.00	298.00	361.00	396.00
    334.00	307.00	371.00	405.00
    370.00	345.00	381.00	418.00
    387.00	360.00	396.00	432.00
    402.00	374.00	410.00	446.00
    433.00	400.00	442.00	476.00
    447.00	414.00	457.00	488.00
    464.00	426.00	477.00	502.00
    478.00	438.00	492.00	513.00
    490.00	448.00	502.00	525.00
    504.00	460.00	514.00	538.00
    515.00	470.00	524.00	548.00
    528.00	482.00	538.00	560.00
    542.00	494.00	552.00	572.00
    556.00	507.00	565.00	585.00
    567.00	519.00	578.00	597.00
    598.00	538.00	607.00	618.00
    613.00	551.00	621.00	633.00
    624.00	562.00	631.00	645.00
    638.00	575.00	645.00	659.00
    652.00	590.00	661.00	673.00
    665.00	600.00	674.00	686.00
    671.00	605.00	679.00	692.00
    689.00	620.00	698.00	710.00
    705.00	635.00	715.00	725.00
    720.00	650.00	730.00	740.00
    732.00	660.00	742.00	751.00
    743.00	671.00	753.00	762.00
    754.00	681.00	764.00	773.00
    764.00	691.00	774.00	783.00
    778.00	705.00	792.00	805.00];

npop=25;

pc=0.8;
nc=2*round(pc*npop/2);

mu=0.2;
nmu=round(mu*npop);
maxit=20;
Tf=400;  %410
Alpha=0.90;
T0=2.5e+06; %2.3177*(10^6)
Nneigh=5;
individual.Position1=zeros(C,2*S,U);
individual.tA=zeros(C,K,I,U);
individual.tD=zeros(C,K,I,U);
individual.Cost=[];
individual.Rank=[];
individual.CrowdingDistance=[];
individual.DominationSet=[];
individual.DominatedCount=[];


pop=repmat(individual,npop,1);
CostFunction=@(x) Cost(x,U,C,K,I,S,TRmin,TRmax,Hmax,Hmin,MinTs,Aiu,TPAiu,Pu);
%% initial solution

tic;
np=1;
while np<=npop
    BREAKING=0;
    pop(np).Position1=rand(C,2*S,U);
    [pop(np)]=CostFunction(pop(np));
    np=np+1;
    
end

T=T0;

T=T0;
%% main program

for it=1:maxit
    
    disp(['Iteration ' num2str(it) ':  Number of 1st Front Individuals = ' num2str(numel(rep))]);
    
    if it==maxit
        break;
    end
    
    %% crossover
    pop2=repmat(individual,nc+nmu,1);
    for k=1:nc/2
        p1=BinaryTournamentSelection(pop);
        p2=BinaryTournamentSelection(pop);
        alpha=rand(C,2*S,U);
        pop2(2*k-1).Position1=(p1.Position1.*alpha+p2.Position1.*(1-alpha));
        pop2(2*k).Position1=(p2.Position1.*alpha+p1.Position1.*(1-alpha));
        
    end
    
    
    
    %% mutation
    
    for k=1:nmu
        p=BinaryTournamentSelection(pop);
        pop2(nc+k).Position1=p.Position1;
        selu=randi(U);
        for u=1:U
            if rand<0.5 || u==selu
                sel=randperm(2*S);
                sav=pop2(nc+k).Position1(:,sel(1),u);
                pop2(nc+k).Position1(:,sel(1),u)=pop2(nc+k).Position1(:,sel(2),u);
                pop2(nc+k).Position1(:,sel(2),u)=sav;
            end
        end
    end
    
    %% Feasibility
    for np=1:nc+nmu
        BREAKING=0;
        [pop2(np)]=CostFunction(pop2(np));
    end
    %% Neighborhood Search
    pop3=repmat(individual,nc+nmu,1);
    for np=1:nc+nmu
        a=1;
        while true
            pop3(np).Position1=pop2(np).Position1;
            switch a
                
                case 1
                    rc=randi(C);
                    ri=randi(2*S);
                    ru=randi(U);
                    pop3(np).Position1(rc,ri,ru)=random('unif',0,pop3(np).Position1(rc,ri,ru));
                    
                case 2
                    rc=randi(C);
                    ri=randi(2*S);
                    ru=randi(U);
                    pop3(np).Position1(rc,ri,ru)=random('unif',pop3(np).Position1(rc,ri,ru),0.999);
                    
                case 3
                    rc=randi(C);
                    ri=randperm(2*S);
                    ru=randi(U);
                    pop3(np).Position1(rc,min(ri(1:2)):max(ri(1:2)),ru)=fliplr(pop3(np).Position1(rc,min(ri(1:2)):max(ri(1:2)),ru));
                    
                case 4
                    sel=randperm(2*S);
                    ru=randi(U);
                    sav=pop3(np).Position1(:,sel(1),ru);
                    pop3(np).Position1(:,sel(1),ru)=pop3(np).Position1(:,sel(2),ru);
                    pop3(np).Position1(:,sel(2),ru)=sav;
                case 5
                    rc=randi(C);
                    ru=randi(U);
                    pop3(np).Position1(rc,:,ru)=[pop3(np).Position1(rc,2:end,ru) pop3(np).Position1(rc,1,ru)] ;
                    
            end
            [pop3(np)]=CostFunction(pop3(np));
            if Dominates( pop3(np),pop2(np))
                pop2(np)=pop3(np);
                a=1;
            else
                DeltaC= max(0,pop3(np).Cost(1)-pop2(np).Cost(1))+max(0,pop3(np).Cost(2)-pop2(np).Cost(2));
                p=exp(-DeltaC/T);
                 if rand<p
                     pop2(np)=pop3(np);
                 end
                a=a+1;
            end
            if a>Nneigh
                break;
            end
        end
    end
    %% migration
    pop=cat(1,pop,pop2);
    [pop,F1]=NonDominatedSorting(pop);
    pop=CalcCrowdingDistance(pop,F1);
    nd_rep=pop(F1{1});
    rep=[rep
        nd_rep];
    
    [rep,FFF]=NonDominatedSorting(rep);
    rep=rep(FFF{1});
    
    pop=SortPopulation(pop);
    if size(pop,1)<npop
        pop=pop(1:size(pop,1));
    else
        pop=pop(1:npop);
    end
    if Alpha * T >= Tf
        T = Alpha * T;
    else
        T = Tf;
    end
    
    
end
tElapsed=toc
nobj=numel(pop(1).Cost);

pareto_cost=reshape([rep.Cost],nobj,[]);
plot(pareto_cost(1,:),pareto_cost(2,:),'ro');

[ MID,SPACING,Diversity,N_Pareto ] = Metric( pareto_cost,[0 0],[max(pareto_cost(1,:))*2 max(pareto_cost(2,:))*2]);
disp('=========================================')
disp('=========================================')
disp('number of pareto =')
disp(N_Pareto);
format long g

Diversity
SPACING
MID
BestF1=rep(ind);
Name={'Objective Value'};
xlswrite('BestF1.xls',Name,'Sheet1','A1')
xlswrite('BestF1.xls',BestF1.Cost,'Sheet1','B1')
for u=1:U
    S1=reshape(BestF1.tA(1,:,:,u),K,I)';
    Sheet=['tA-Senario' num2str(u)];
    xlswrite('BestF1.xls',1:K,Sheet,'B1')
    xlswrite('BestF1.xls',(1:I)',Sheet,'A2')
    xlswrite('BestF1.xls',S1,Sheet,'B2')
    
    S1=reshape(BestF1.tD(1,:,:,u),K,I)';
    Sheet=['tD-Senario' num2str(u)];
    xlswrite('BestF1.xls',1:K,Sheet,'B1')
    xlswrite('BestF1.xls',(1:I)',Sheet,'A2')
    xlswrite('BestF1.xls',S1,Sheet,'B2')
end  
 [~,ind] =min (pareto_cost(2,:));
BestF2=rep(ind);
xlswrite('BestF2.xls',Name,'Sheet1','A1')
xlswrite('BestF2.xls',BestF2.Cost,'Sheet1','B1')
for u=1:U
    S1=reshape(BestF2.tA(1,:,:,u),K,I)';
    Sheet=['tA-Senario' num2str(u)];
    xlswrite('BestF2_20.xls',1:K,Sheet,'B1')
    xlswrite('BestF2_20.xls',(1:I)',Sheet,'A2')
    xlswrite('BestF2_20.xls',S1,Sheet,'B2')
    
    S1=reshape(BestF2.tD(1,:,:,u),K,I)';
    Sheet=['tD-Senario' num2str(u)];
    xlswrite('BestF2_20.xls',1:K,Sheet,'B1')
    xlswrite('BestF2_20.xls',(1:I)',Sheet,'A2')
    xlswrite('BestF2_20.xls',S1,Sheet,'B2')
    
end

